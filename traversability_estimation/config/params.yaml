traversability_estimation:
  ros__parameters:
    use_sim_time: true
    common:
      input_cloud: "/world/world.pcd" # Can be .pcd file or a ros topic (PointCloud2)
      map_frame: "map"
      n_threads: 8 #number of threads
      publish_rate: 0.5 #publish rate in [Hz]

    robot:
      inscribed_radius: 0.4 #sphere model of robot see http://wiki.ros.org/costmap_2d/hydro/inflation (just in 3d)
      normal_offset: 0.35 #offset for the spheres in direction of the normal
      # offset will be used in nearest obstacle/boundary search
      allowed_slope_angle: 30.0 #in degrees #everything steeper than this will be considered an obstacle

    filters:
      voxel_down_sampling: #reduce density -> better performance
        voxel_size: 0.1 #size of voxel grid [m] -> bigger = less points
        downsample_all_data: true #if false only downsample XYZ
      outlier_removal: #remove points without local neighbors -> noise reduction
        radius: 0.2 #radius of search
        neighbors: 3 #minimum number of neighbors in order to keep point
      clustering: # remove small clusters
        eps: 0.2 #distance between points to be considered in the same cluster
        min_points: 15 #minimum number of points in a cluster

    traversability_estimation: #Step 2 split points in obstacles and traversable
      normal_vector_estimation:
        radius: 0.35 #radius of search
      boundary_estimation:
        radius: 0.35 #radius of search
        angle_threshold: 2.0 #angle gap threshold in radians

    costs: #http://wiki.ros.org/costmap_2d/hydro/inflation
      max_cost: 254.0 #when a point hits this cost it is considered non-traversable (c_{max} in paper)
      slope_weight: 100.0 #slope is a value between 0 (horizontal) and 1 (vertical), slope cost = slope * slope_weight
      curvature_weight: 100.0 #curvature is a value between 0 (flat/smooth) and 1 (curved/noisy/rough), curvature cost = curvature * curvature_weight
      inflation_weight: 254.0
      inflation: #inflation_weight * exp(-1*cost_scaling_factor * (distance_from_obstacle/boundary - robot.inscribed_radius))
        radius: 1.5 #distance where cost will be applied, don't use to high values because of performance
        cost_scaling_factor: 2.5 # \alpha in paper
        obstacle_normal_offset: 0.1 #offset normal plane (cost will be applied by finding the closest obstacle point above the normal plane)
        boundary_normal_offset: -0.1 #offset normal plane (cost will be applied by finding the closest boundary point above the normal plane)
      # final cost = slope_cost + curvature_cost + inflation_cost, but final cost is capped at max_cost -> non-traversable

graph_planning:
  ros__parameters:
    use_sim_time: true
    common:
      n_threads: 8 #number of threads
      map_frame: "map"
      robot_frame: "base_link"
    costs: 
      lethal_cost: 254.0 #c_{lethal} in paper
      distance_weight: 50.0 #distance cost = distance * distance_weight
      alignment_cost_weight: 500.0 #alignment cost = (1 - abs(dot(movement_direction, gradient_direction))) * alignment_cost_weight
      traversability_weight: 1.0 #traversability_cost = goal_nodes final cost * traversability_weight
      alignment_slope_threshold: 10.0 #in degree
      #final edge cost = distance_cost + alignment_cost + traversability_cost, but is capped at lethal_cost where the edge gets deleted

    graph:
      voxel_size: 0.2 #voxel grid size
      max_neighbors: 100 #maximum number of neighbors in the graph
      max_distance: 0.4 #maximum distance between nodes in the graph

    path:
      dynamic_inflation_radius: 1.5
      dynamic_inflation_weight: 254.0
      cost_scaling_factor: 1.0
      smoothing_window_size: 3 #number of points in the smoothing window


graph_visualization:
  ros__parameters:
    use_sim_time: true
    lethal_cost: 254.0
    color_min: [0, 85, 0] #green
    color_max: [255, 170, 0] #orange
    node_size: 0.05
    line_width: 0.01
